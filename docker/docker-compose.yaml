
version: '3'

services:
  angularjs:
    container_name: angularjs
    image: duramana/angularjs:v7
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
    env_file:
      - ./.env
    tty: true
    volumes:
      - ./front:/app
      - ./front/node_modules:/app/node_modules
    networks:
      - app-network
    ports:
      - "80:80"

  laravel:
    image: duramana/laravel:v10
    container_name: laravel
    build:
        context: ./back
        dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    ports:
      - "8000:80"
    environment:
        APP_NAME: ${APP_NAME}
        APP_ENV: ${APP_ENV}
        APP_KEY: ${APP_KEY}
        APP_DEBUG: ${APP_DEBUG}
        APP_URL: ${APP_URL}
        APP_DOMAIN: ${APP_DOMAIN}

        LOG_CHANNEL: ${LOG_CHANNEL}

        DB_CONNECTION: ${DB_CONNECTION}
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_DATABASE: ${DB_DATABASE}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}

        RABBITMQ_HOST: ${RABBITMQ_HOST}
        RABBITMQ_PORT: ${RABBITMQ_PORT}
        RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
        RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
        RABBITMQ_VHOST: ${RABBITMQ_DEFAULT_VHOST}
        RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
        RABBITMQ_DRIVER: ${RABBITMQ_DRIVER}

        LASTICSEARCH_URI: ${ELASTICSEARCH_URI}
#    links:
#      - database
#      - rabbitmq
#      - elasticsearch
#    depends_on:
#      - database
#      - rabbitmq
#      - elasticsearch
    networks:
      - app-network
    env_file:
      - ./.env

  rabbitmq:
    container_name: rabbitmq
    image: duramana/rabbitmq:v3
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    restart: always
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
      - "4369:4369"
      - "5671:5671"
      - "15691:15691"
      - "15692:15692"
      - "25672:25672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      RABBITMQ_DEFAULT_EXCHANGE: ${RABBITMQ_EXCHANGE_NAME}
    networks:
      - app-network

  elasticsearch:
    container_name: elasticsearch
    image: duramana/elasticsearch:v2
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - discovery.zen.minimum_master_nodes=1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network

  indexer:
    container_name: indexer
    image: duramana/indexer:v2
    build:
      context: ./indexer
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      - AMQP_URI=${AMQP_URI}
      - ELASTICSEARCH_URI=${ELASTICSEARCH_URI}
    ports:
      - "3000:3000"
    networks:
      - app-network
    links:
      - elasticsearch
      - rabbitmq

  reporting:
    container_name: reporting
    image: duramana/reporting:v2
    build:
      context: ./reporting
      dockerfile: Dockerfile
    restart: always
    tty: true
    environment:
      - DB_URI=${DB_URI}
      - WEBHOOK_URL=${WEBHOOK_URL}
    ports:
      - "5000:5000"
    depends_on:
      - database
    networks:
      - app-network

  database:
    image: mysql:8.0
    container_name: database
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: database
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  vendor:
  esdata:
